########################################################################################################################
# user
#
# Defines user and group credentials used by worker processes.
# If group is omitted, a group whose name equals that of user is used.
#
# Syntax:	user user [group];
# Default:  user nobody nobody;
# Context:	main
########################################################################################################################
user root root;

########################################################################################################################
# worker_processes
#
# Defines the number of worker processes.
# The optimal value depends on many factors including (but not limited to) the number of CPU cores, the number of hard
# disk drives that store data, and load pattern. When one is in doubt, setting it to the number of available CPU cores
# would be a good start (the value “auto” will try to autodetect it).
#
# **** The auto parameter is supported starting from versions 1.3.8 and 1.2.5. ***
#
# grep processor /proc/cpuinfo | wc -l
#
# Syntax:	worker_processes number | auto;
# Default:	worker_processes 1;
# Context:	main
########################################################################################################################
worker_processes auto;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

########################################################################################################################
# pid
#
# Defines a file that will store the process ID of the main process.
#
# Syntax:	pid file;
# Default:	pid nginx.pid;
# Context:	main
########################################################################################################################
pid /var/run/nginx.pid;

########################################################################################################################
# error_log
#
# Configures logging. Several logs can be specified on the same level (1.5.2).
# The first parameter defines a file that will store the log. The special value stderr selects the standard error file.
# Logging to syslog can be configured by specifying the “syslog:” prefix. Logging to a cyclic memory buffer can be
# configured by specifying the “memory:” prefix and buffer size, and is generally used for debugging (1.7.11).
#
# The second parameter determines the level of logging, and can be one of the following: debug, info, notice, warn,
# error, crit, alert, or emerg. Log levels above are listed in the order of increasing severity. Setting a certain log
# level will cause all messages of the specified and more severe log levels to be logged. For example, the default level
# error will cause error, crit, alert, and emerg messages to be logged. If this parameter is omitted then error is used.
#
# Syntax:	error_log file [level];
# Default:	error_log logs/error.log error;
# Context:	main, http, mail, stream, server, location
########################################################################################################################
error_log /var/log/nginx/error.log warn;

########################################################################################################################
# events
#
# Provides the configuration file context in which the directives that affect connection processing are specified.
#
# Syntax:	events { ... }
# Default:	—
# Context:	main
########################################################################################################################
events {
    ####################################################################################################################
    # worker_connections
    #
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    #
    # It should be kept in mind that this number includes all connections (e.g. connections with proxied servers, among
    # others), not only connections with clients. Another consideration is that the actual number of simultaneous
    # connections cannot exceed the current limit on the maximum number of open files, which can be changed by
    # worker_rlimit_nofile.
    #
    # Syntax:	worker_connections number;
    # Default:	worker_connections 512;
    # Context:	events
    ####################################################################################################################
    #worker_connections 4000;
    # worker_processes and worker_connections allows you to calculate maxclients value:
    #max_clients = 20480

    # optmized to serve many clients with each thread, essential for linux
    #use epoll;

    # accept as many connections as possible, may flood worker connections if set too low
    #multi_accept on;
}

http {

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    #open_file_cache max=200000 inactive=20s;
    #open_file_cache_valid 30s;
    #open_file_cache_min_uses 2;
    #open_file_cache_errors on;

    include mime.types;

    ####################################################################################################################
    # default_type
    #
    # Defines the default MIME type of a response. Mapping of file name extensions to MIME types can be set with the
    # types directive.
    #
    # Syntax:	default_type mime-type;
    # Default:	default_type text/plain;
    # Context:	http, server, location
    ####################################################################################################################
    default_type application/octet-stream;

    ####################################################################################################################
    # log_format
    #
    # Specifies log format.
    #
    # Syntax:	log_format name string ...;
    # Default:	log_format combined "...";
    # Context:	http
    ####################################################################################################################
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    ####################################################################################################################
    # sendfile
    #
    # Enables or disables the use of sendfile().
    #
    # If serving locally stored static files, sendfile is essential to speed up the server, But if using as reverse
    # proxy one can deactivate it
    #
    # Syntax:	sendfile on | off;
    # Default:	sendfile off;
    # Context:	http, server, location, if in location
    ####################################################################################################################
    sendfile on;

    ####################################################################################################################
    # tcp_nopush
    #
    # Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK socket option on Linux.
    # The options are enabled only when sendfile is used. Enabling the option allows
    #
    # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.
    #
    # Syntax:	tcp_nopush on | off;
    # Default:	tcp_nopush off;
    # Context:	http, server, location
    ####################################################################################################################
    tcp_nopush off;

    ####################################################################################################################
    # client_body_timeout
    #
    # Defines a timeout for reading client request body. The timeout is set only for a period between two successive
    # read operations, not for the transmission of the whole request body. If a client does not transmit anything within
    # this time, the 408 (Request Time-out) error is returned to the client.
    #
    # shows the maximum number and size of buffers for large client headers. 4 headers with 4k buffers should be
    # sufficient here.
    #
    # Syntax:	client_body_timeout time;
    # Default:	client_body_timeout 60s;
    # Context:	http, server, location
    ####################################################################################################################
    client_body_timeout 60m;

    ####################################################################################################################
    # client_header_timeout
    #
    # Defines a timeout for reading client request header. If a client does not transmit the entire header within this
    # time, the 408 (Request Time-out) error is returned to the client.
    #
    # Syntax:	client_header_timeout time;
    # Default:	client_header_timeout 60s;
    # Context:	http, server
    ####################################################################################################################
    client_header_timeout 60m;

    ####################################################################################################################
    # keepalive_timeout
    #
    # The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side.
    # The zero value disables keep-alive client connections. The optional second parameter sets a value in the
    # “Keep-Alive: timeout=time” response header field. Two parameters may differ.
    #
    # The “Keep-Alive: timeout=time” header field is recognized by Mozilla and Konqueror. MSIE closes keep-alive
    # connections by itself in about 60 seconds.
    #
    # Syntax:	keepalive_timeout timeout [header_timeout];
    # Default:	keepalive_timeout 75s;
    # Context:	http, server, location
    ####################################################################################################################
    keepalive_timeout 600s;
    keepalive_requests 100000;

    ####################################################################################################################
    # send_timeout
    #
    # Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write
    # operations, not for the transmission of the whole response. If the client does not receive anything within this
    # time, the connection is closed.
    #
    # Syntax:	send_timeout time;
    # Default:	send_timeout 60s;
    # Context:	http, server, location
    ####################################################################################################################
    send_timeout 60m;

    ####################################################################################################################
    # client_body_buffer_size
    #
    # Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole
    # body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages. This
    # is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.
    #
    # Syntax:	client_body_buffer_size size;
    # Default:	client_body_buffer_size 8k|16k;
    # Context:	http, server, location
    ####################################################################################################################
    client_body_buffer_size 128k;

    ####################################################################################################################
    # client_header_buffer_size
    #
    # Sets buffer size for reading client request header. For most requests, a buffer of 1K bytes is enough. However,
    # if a request includes long cookies, or comes from a WAP client, it may not fit into 1K. If a request line or a
    # request header field does not fit into this buffer then larger buffers, configured by the
    # large_client_header_buffers directive, are allocated.
    #
    # Syntax:	client_header_buffer_size size;
    # Default:	client_header_buffer_size 1k;
    # Context:	http, server
    ####################################################################################################################
    client_header_buffer_size 1k;

    ####################################################################################################################
    # client_max_body_size
    #
    # Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field.
    # If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to
    # the client. Please be aware that browsers cannot correctly display this error. Setting size to 0 disables checking
    # of client request body size.
    #
    # Syntax:	client_max_body_size size;
    # Default:	client_max_body_size 1m;
    # Context:	http, server, location
    ####################################################################################################################
    client_max_body_size 1000M;

    ####################################################################################################################
    # large_client_header_buffers
    #
    # Sets the maximum number and size of buffers used for reading large client request header. A request line cannot
    # exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned to the client. A request header
    # field cannot exceed the size of one buffer as well, or the 400 (Bad Request) error is returned to the client.
    # Buffers are allocated only on demand. By default, the buffer size is equal to 8K bytes. If after the end of request
    # processing a connection is transitioned into the keep-alive state, these buffers are released.
    #
    # Syntax:	large_client_header_buffers number size;
    # Default:	large_client_header_buffers 4 8k;
    # Context:	http, server
    ####################################################################################################################
    large_client_header_buffers 4 4k;

    ####################################################################################################################
    # gzip
    #
    # Enables or disables gzipping of responses.
    #
    # Syntax:	gzip on | off;
    # Default:	gzip off;
    # Context:	http, server, location, if in location
    ####################################################################################################################
    gzip on;

    ####################################################################################################################
    # gzip_comp_level
    #
    # Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9.
    #
    # Syntax:	gzip_comp_level level;
    # Default:	gzip_comp_level 1;
    # Context:	http, server, location
    ####################################################################################################################
    gzip_comp_level 2;

    ####################################################################################################################
    # gzip_min_length
    #
    # Sets the minimum length of a response that will be gzipped. The length is determined only from the
    # “Content-Length” response header field.
    #
    # Syntax:	gzip_min_length length;
    # Default:	gzip_min_length 20;
    # Context:	http, server, location
    ####################################################################################################################
    gzip_min_length 1000;

    ####################################################################################################################
    # gzip_proxied
    #
    # Enables or disables gzipping of responses for proxied requests depending on the request and response. The fact
    # that the request is proxied is determined by the presence of the “Via” request header field. The directive accepts
    # multiple parameters:
    #
    # Syntax:	gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ..;
    # Default:	gzip_proxied off;
    # Context:	http, server, location
    ####################################################################################################################
    gzip_proxied expired no-cache no-store private auth;

    ####################################################################################################################
    # gzip_types
    #
    # Enables gzipping of responses for the specified MIME types in addition to “text/html”. The special value “*”
    # matches any MIME type (0.8.29). Responses with the “text/html” type are always compressed.
    #
    # Syntax:	gzip_types mime-type ...;
    # Default:	gzip_types text/html;
    # Context:	http, server, location
    ####################################################################################################################
    gzip_types text/plain application/x-javascript text/xml text/css application/xml;

    ########################################################################################################################
    # access_log
    #
    # Sets the path, format, and configuration for a buffered log write. Several logs can be specified on the same
    # level. Logging to syslog can be configured by specifying the “syslog:” prefix in the first parameter. The special
    # value off cancels all access_log directives on the current level. If the format is not specified then the
    # predefined “combined” format is used.
    #
    # Syntax:	access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];access_log off;
    # Default:	access_log logs/access.log combined;
    # Context:	http, server, location, if in location, limit_except
    ########################################################################################################################
    access_log off;

    #fastcgi_cache_path /tmp levels=1:2 keys_zone=MYAPP:3m inactive=3m;
    #fastcgi_cache_key "$scheme$request_method$host$request_uri";

    #fastcgi_cache_path /etc/nginx/cache levels=1:2 keys_zone=microcache:5m max_size=1000m;
    #log_format cache '$remote_addr - $remote_user [$time_local] "$request" '
    #'$status $upstream_cache_status $body_bytes_sent "$http_referer" '
    #'"$http_user_agent" "$http_x_forwarded_for"';

    #proxy_cache_path   /etc/nginx/cache keys_zone=one:10m loader_threshold=300 loader_files=200 max_size=200m;
    #fastcgi_cache_path /etc/nginx/cache keys_zone=two:10m inactive=60m;
    #fastcgi_cache_key "$scheme$request_method$host$request_uri";
    #fastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=nginxfastcgicache:10m inactive=1h max_size=1g;
    #fastcgi_cache_key "$scheme$request_method$host$request_uri";
    #fastcgi_temp_path       /var/cache/nginx/fastcgi_temp;
    #fastcgi_cache_use_stale error timeout invalid_header http_500;
    #fastcgi_ignore_headers  Cache-Control Expires Set-Cookie;
    #fastcgi_cache_lock      on;

    ####################################################################################################################
    # default conf
    ####################################################################################################################
    #server {
    #    listen 80;
    #    listen [::]:80 default_server;
    #    server_name _;
    #    root    /usr/share/nginx/html;
    #    include /etc/nginx/common.conf;
    #}

    ####################################################################################################################
    # include php-fpm
    ####################################################################################################################
    include /etc/nginx/phpfpm.conf;

    ####################################################################################################################
    # include servers
    ####################################################################################################################
    #include /etc/nginx/conf.d/*.conf;
}